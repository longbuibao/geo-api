<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <title>
        Thêm khu vực phong tỏa
    </title>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="/css/adminstyle.css">
    <link rel="stylesheet" href="https://js.arcgis.com/4.19/esri/themes/light/main.css" />
    <script src="https://js.arcgis.com/4.19/"></script>

    <style>
        html,
        body,
        #viewDiv {
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
        }
        
        form {
            margin-top: 10px;
            margin-right: 10px;
            width: 200px;
        }
    </style>
    <script>
        var longLatArray = [];
        require([
            "esri/Map",
            "esri/views/MapView",
            "esri/views/draw/Draw",
            "esri/Graphic",
            "esri/geometry/geometryEngine"
        ], (Map, MapView, Draw, Graphic, geometryEngine) => {
            const map = new Map({
                basemap: "gray-vector"
            });
            const view = new MapView({
                container: "viewDiv",
                map: map,
                zoom: 12,
                center: [106.61161801378586, 10.720173847940856]
            });
            // add the button for the draw tool
            view.ui.add("line-button", "top-left");
            view.popup.autoOpenEnabled = false; // Disable the default popup behavior
            view.on("click", function(event) { // Listen for the click event
                view.hitTest(event).then(function(hitTestResults) { // Search for features where the user clicked
                    if (hitTestResults.results) {
                        console.log('long: ' + event.mapPoint.longitude, '\nlat: ' + event.mapPoint.latitude)
                        longLatArray.push([event.mapPoint.longitude, event.mapPoint.latitude])
                    }
                })
            });
            const draw = new Draw({
                view: view
            });
            // draw polyline button
            document.addEventListener('keydown', function(event) {
                if (event.ctrlKey && event.key === 'z') {
                    longLatArray.pop()
                    console.log(longLatArray)
                }
            });
            document.onkeydown = function(evt) {
                evt = evt || window.event;
                var isEscape = false;
                var isBackslash = false;
                if ("key" in evt) {
                    isEscape = (evt.key === "Escape" || evt.key === "Esc");
                    isBackslash = (evt.key === "Backspace" || evt.key === "Delete");
                } else {
                    isEscape = (evt.keyCode === 27);
                    isEscape = (evt.keyCode === 8);
                }
                if (isEscape) {
                    let textArr = [];
                    longLatArray.forEach(element => {
                        textArr.push('[' + element + ']')
                    })
                    textArr.push(textArr[0])
                    copy('[' + textArr.reverse().toString() + ']')
                    console.log('[' + textArr.toString() + ']')
                    document.getElementById('isoLongLat').value = '[' + textArr.reverse().toString() + ']'
                    longLatArray = []
                    textArr = []
                }
                if (isBackslash) {
                    longLatArray.pop()
                }
            };
            document.getElementById("line-button").onclick = () => {
                view.graphics.removeAll();
                // creates and returns an instance of PolyLineDrawAction
                const action = draw.create("polyline");
                // focus the view to activate keyboard shortcuts for sketching
                view.focus();
                // listen polylineDrawAction events to give immediate visual feedback
                // to users as the line is being drawn on the view.
                action.on(
                    [
                        "vertex-add",
                        "vertex-remove",
                        "cursor-update",
                        "redo",
                        "undo",
                        "draw-complete"
                    ],
                    updateVertices
                );
            };

            function copy(txt) {
                var cb = document.getElementById("cb");
                cb.value = txt;
                cb.style.display = 'block';
                cb.select();
                document.execCommand('copy');
                cb.style.display = 'none';
            }
            // Checks if the last vertex is making the line intersect itself.
            function updateVertices(event) {
                // create a polyline from returned vertices
                if (event.vertices.length > 1) {
                    const result = createGraphic(event);
                    // if the last vertex is making the line intersects itself,
                    // prevent the events from firing
                    if (result.selfIntersects) {
                        event.preventDefault();
                    }
                }
            }
            // create a new graphic presenting the polyline that is being drawn on the view
            function createGraphic(event) {
                const vertices = event.vertices;
                view.graphics.removeAll();
                // a graphic representing the polyline that is being drawn
                const graphic = new Graphic({
                    geometry: {
                        type: "polyline",
                        paths: vertices,
                        spatialReference: view.spatialReference
                    },
                    symbol: {
                        type: "simple-line", // autocasts as new SimpleFillSymbol
                        color: [4, 90, 141],
                        width: 1,
                        cap: "round",
                        join: "round"
                    }
                });
                // check if the polyline intersects itself.
                const intersectingSegment = getIntersectingSegment(graphic.geometry);
                // Add a new graphic for the intersecting segment.
                if (intersectingSegment) {
                    view.graphics.addMany([graphic, intersectingSegment]);
                }
                // Just add the graphic representing the polyline if no intersection
                else {
                    view.graphics.add(graphic);
                }
                // return intersectingSegment
                return {
                    selfIntersects: intersectingSegment
                };
            }
            // function that checks if the line intersects itself
            function isSelfIntersecting(polyline) {
                if (polyline.paths[0].length < 3) {
                    return false;
                }
                const line = polyline.clone();
                //get the last segment from the polyline that is being drawn
                const lastSegment = getLastSegment(polyline);
                line.removePoint(0, line.paths[0].length - 1);
                // returns true if the line intersects itself, false otherwise
                return geometryEngine.crosses(lastSegment, line);
            }
            // Checks if the line intersects itself. If yes, change the last
            // segment's symbol giving a visual feedback to the user.
            function getIntersectingSegment(polyline) {
                if (isSelfIntersecting(polyline)) {
                    return new Graphic({
                        geometry: getLastSegment(polyline),
                        symbol: {
                            type: "simple-line", // autocasts as new SimpleLineSymbol
                            style: "short-dot",
                            width: 3.5,
                            color: "yellow"
                        }
                    });
                }
                return null;
            }
            // Get the last segment of the polyline that is being drawn
            function getLastSegment(polyline) {
                const line = polyline.clone();
                const lastXYPoint = line.removePoint(0, line.paths[0].length - 1);
                const existingLineFinalPoint = line.getPoint(
                    0,
                    line.paths[0].length - 1
                );
                return {
                    type: "polyline",
                    spatialReference: view.spatialReference,
                    hasZ: false,
                    paths: [
                        [
                            [existingLineFinalPoint.x, existingLineFinalPoint.y],
                            [lastXYPoint.x, lastXYPoint.y]
                        ]
                    ]
                };
            }
        });
    </script>
</head>

<body>
    <div class="row">
        <div class="col-lg-2 col-md-3 col-sm-3 sidebar pr-0 mr-0">
            <div class="logo">
                <a href="/patient-list-update"><img src="img/GreenMask.png"></a>
            </div>
            <nav>
                <ul>
                    <li class="<%=(title === 'Danh sách bệnh nhân' || title === 'Bệnh nhân') ? 'active' : '' %>"><a href="/patient-list-update">Bệnh nhân</a></li>
                    <li class="<%=title === 'Điểm phong tỏa' ? 'active' : '' %>"><a href="/add-lockade-area">Điểm phong tỏa</a></li>
                    <li class="active"><a href="/add-isolation-zone">Khu vực phong tỏa</a></li>
                </ul>
            </nav>
        </div>

        <div class="col-lg-10 col-md-10 col-sm-10 px-0">
            <div id="viewDiv">
                <div id="line-button" class="esri-widget esri-widget--button
                esri-interactive" title="Draw polyline">
                    <span class="esri-icon-polyline"></span>
                </div>
                <form action="/add-isolation-zone" method="POST" style="position: absolute; right: 15px; top: 0;">
                    <label for="tenVung">Tên vùng: </label>
                    <input type="text" required name="tenVung"><br><br>

                    <label for="isoLat">Tọa độ: </label>
                    <input type="text" id="isoLongLat" required name="points"><br><br>
                    <input type="submit" value="Submit">
                </form>
            </div>
            <input id="cb" type="text" hidden>
            <!-- <input id="cb" type="text" hidden> -->
        </div>
    </div>
</body>

</html>